# closed-form formula simulation for following
# rand(n) returns a uniformly random integer between 0 and nâˆ’1
#  inclusive. Let Ck
#  be the number of unique integers generated by k
#  independent calls to rand(n).

import random

def rand(n):
    return random.randint(0, n-1)

def get_uniq_count(n, k):
    uniq_count = 0
    uniq_set = set()
    for i in range(k):
        rnum = rand(n)
        if rnum not in uniq_set:
            uniq_count += 1
            uniq_set.add(rnum)
    return uniq_count

def simulate_exp_val(n, k, itr):
    total_uniq_count = 0
    for i in range(itr):
        total_uniq_count += get_uniq_count(n, k)
    return total_uniq_count / itr

n = 10
k = 5
itr = 10000

sim_res = simulate_exp_val(n, k, itr)
formula_res = n * (1 - (1 - 1/n)**k)

print("Simulation result: ", sim_res)
print("Formula result: ", formula_res)